name: Enhanced CI with Phase 9 Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: info

jobs:
  # Basic test suite - runs on every PR and push
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache test data
      uses: actions/cache@v3
      with:
        path: testdata
        key: ${{ runner.os }}-testdata-${{ hashFiles('**/Cargo.lock') }}

    - name: Install dependencies
      run: |
        cargo install cargo-make
        cargo install cargo-nextest

    - name: Run unit tests
      run: ./scripts/run_tests.sh unit

    - name: Run integration tests
      run: ./scripts/run_tests.sh integration

    - name: Run cross-platform tests
      run: ./scripts/run_tests.sh cross-platform

    - name: Generate test reports
      run: ./scripts/test_debug_tool.sh

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ matrix.os }}-${{ matrix.rust }}
        path: |
          reports/
          testdata/metadata/

  # Nightly comprehensive test suite - runs on schedule and main branch
  nightly:
    name: Nightly Comprehensive Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly
        targets: x86_64-unknown-linux-gnu

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-nightly-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache test data
      uses: actions/cache@v3
      with:
        path: testdata
        key: ${{ runner.os }}-testdata-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache fuzz corpus
      uses: actions/cache@v3
      with:
        path: jac-codec/fuzz/corpus
        key: ${{ runner.os }}-fuzz-corpus-${{ hashFiles('**/Cargo.lock') }}

    - name: Install dependencies
      run: |
        cargo install cargo-make
        cargo install cargo-nextest
        cargo install cargo-fuzz
        cargo install cargo-audit
        cargo install cargo-deny

    - name: Run all tests
      run: ./scripts/run_tests.sh all

    - name: Run slow tests
      run: ./scripts/run_tests.sh slow

    - name: Run stress tests
      run: ./scripts/run_tests.sh stress

    - name: Run performance tests
      run: ./scripts/run_tests.sh performance

    - name: Run security fuzzing
      run: ./scripts/security_fuzz.sh

    - name: Generate comprehensive reports
      run: |
        ./scripts/test_debug_tool.sh
        ./scripts/generate_security_report.sh
        ./scripts/manage_fixture_provenance.sh audit

    - name: Upload comprehensive reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: nightly-reports
        path: |
          reports/
          testdata/metadata/

  # Security and compliance testing
  security:
    name: Security & Compliance
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-stable-${{ hashFiles('**/Cargo.lock') }}

    - name: Install security tools
      run: |
        cargo install cargo-audit
        cargo install cargo-deny
        cargo install cargo-geiger

    - name: Run security audit
      run: cargo audit

    - name: Run dependency check
      run: cargo deny check

    - name: Check for unsafe code
      run: cargo geiger

    - name: Run security property tests
      run: cargo test --package jac-codec --test security_property_tests

    - name: Generate security report
      run: ./scripts/generate_security_report.sh

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: reports/security/

  # Performance monitoring and benchmarking
  performance:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-stable-${{ hashFiles('**/Cargo.lock') }}

    - name: Install performance tools
      run: |
        cargo install cargo-criterion
        cargo install cargo-flamegraph

    - name: Run benchmarks
      run: cargo bench --workspace

    - name: Run performance tests
      run: ./scripts/run_tests.sh performance

    - name: Generate performance reports
      run: ./scripts/test_debug_tool.sh

    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports
        path: |
          reports/
          target/criterion/

  # Fuzzing and property testing
  fuzzing:
    name: Fuzzing & Property Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-nightly-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache fuzz corpus
      uses: actions/cache@v3
      with:
        path: jac-codec/fuzz/corpus
        key: ${{ runner.os }}-fuzz-corpus-${{ hashFiles('**/Cargo.lock') }}

    - name: Install fuzzing tools
      run: |
        cargo install cargo-fuzz
        cargo install cargo-afl

    - name: Run fuzzing
      run: ./scripts/security_fuzz.sh

    - name: Run property tests
      run: cargo test --package jac-codec --test security_property_tests

    - name: Upload fuzzing reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: fuzzing-reports
        path: |
          reports/
          jac-codec/fuzz/corpus/

  # Code quality and formatting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: [clippy, rustfmt]

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-stable-${{ hashFiles('**/Cargo.lock') }}

    - name: Run clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Check documentation
      run: cargo doc --workspace --no-deps --document-private-items

  # Cross-platform compatibility testing
  cross-platform:
    name: Cross-Platform Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache test data
      uses: actions/cache@v3
      with:
        path: testdata
        key: ${{ runner.os }}-testdata-${{ hashFiles('**/Cargo.lock') }}

    - name: Run cross-platform tests
      run: ./scripts/run_tests.sh cross-platform

    - name: Run endianness tests
      run: cargo test --package jac-codec --test cross_platform_compatibility

    - name: Upload cross-platform reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cross-platform-reports-${{ matrix.os }}
        path: reports/

  # Documentation and compliance
  docs:
    name: Documentation & Compliance
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-stable-${{ hashFiles('**/Cargo.lock') }}

    - name: Build documentation
      run: cargo doc --workspace --no-deps --document-private-items

    - name: Generate compliance report
      run: ./scripts/generate_security_report.sh

    - name: Generate fixture provenance report
      run: ./scripts/manage_fixture_provenance.sh report

    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

    - name: Upload compliance reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: compliance-reports
        path: |
          reports/
          target/doc/

  # Test data management and validation
  test-data:
    name: Test Data Management
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-stable-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache test data
      uses: actions/cache@v3
      with:
        path: testdata
        key: ${{ runner.os }}-testdata-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip install numpy pandas

    - name: Generate test data
      run: ./scripts/manage_test_data.sh generate --category all --size medium

    - name: Validate test data
      run: ./scripts/manage_test_data.sh validate

    - name: Generate fixture provenance
      run: ./scripts/manage_fixture_provenance.sh generate

    - name: Validate fixture provenance
      run: ./scripts/manage_fixture_provenance.sh validate

    - name: Upload test data reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-data-reports
        path: |
          testdata/
          reports/

  # Summary and notification
  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, nightly, security, performance, fuzzing, quality, cross-platform, docs, test-data]
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: all-reports

    - name: Generate summary report
      run: |
        echo "# JAC Phase 9 Testing Summary" > test_summary.md
        echo "Generated on: $(date)" >> test_summary.md
        echo "" >> test_summary.md
        echo "## Test Results" >> test_summary.md
        echo "- Basic Tests: ${{ needs.test.result }}" >> test_summary.md
        echo "- Nightly Tests: ${{ needs.nightly.result }}" >> test_summary.md
        echo "- Security Tests: ${{ needs.security.result }}" >> test_summary.md
        echo "- Performance Tests: ${{ needs.performance.result }}" >> test_summary.md
        echo "- Fuzzing Tests: ${{ needs.fuzzing.result }}" >> test_summary.md
        echo "- Quality Checks: ${{ needs.quality.result }}" >> test_summary.md
        echo "- Cross-Platform Tests: ${{ needs.cross-platform.result }}" >> test_summary.md
        echo "- Documentation: ${{ needs.docs.result }}" >> test_summary.md
        echo "- Test Data: ${{ needs.test-data.result }}" >> test_summary.md
        echo "" >> test_summary.md
        echo "## Artifacts" >> test_summary.md
        find all-reports -name "*.html" -o -name "*.txt" -o -name "*.json" | while read file; do
          echo "- $file" >> test_summary.md
        done

    - name: Upload summary report
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test_summary.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test_summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
